"use strict";
/* global declareUpdate, xdmp */ // For ESLint

declareUpdate();

const test = require("/test/test-helper.xqy");
const tde = require("/MarkLogic/tde.xqy");
const {createImplicitSchema, storeImplicitSchema} = require("/mlGraphqlLibOpticApi");
const admin = require("/MarkLogic/admin.xqy");
const {parse} = require("/graphql/language/parser");
const assertions = [];

function testSetup() {
  const dataFiles = ["humans", "cars", "laptops", "houses", "rooms", "drinks"];
  // Load the TDE templates
  dataFiles.forEach(function(template) {
    let templateJson = xdmp.toJSON(test.getTestFile(template + "-TDE.tdej"));
    tde.templateInsert("/templates/" + template + "-TDE.tdej", templateJson);
  });
  // Load the test data
  dataFiles.forEach(function(template) {
    test.loadTestFile(template + ".xml", xdmp.database(), "/" + template + ".xml");
  });
}

function testTeardown() {
  xdmp.documentDelete("/humans.xml");

  function deleteDocumentInOtherDatabaseFunction(uri) {
    return {
      setUri: function setUri(_uri) { uri = _uri; },
      delete: function docDelete() { declareUpdate(); xdmp.documentDelete(uri); }
    };
  }

  const dataFiles = ["humans", "cars", "laptops", "houses", "rooms", "drinks"];
  // Delete the TDE templates from the schemas database
  dataFiles.forEach(function(template) {
    let testInvoke = deleteDocumentInOtherDatabaseFunction("/templates/" + template + "-TDE.tdej");
    xdmp.invokeFunction(
      testInvoke.delete,
      {database: xdmp.schemaDatabase()}
    );
  });
}

testSetup();

// Given default data store in the database though test setup
// When implicit schema is created by the user
// Then test if implicit schema is containing desired information.
let createdSchema = createImplicitSchema();
let createdSchemaString = JSON.stringify(createdSchema);
console.log("Actual Result of createdSchema =>\n" + createdSchema);

let graphqlSchemaTypes = ["graphql_Humans", "graphql_Cars", "graphql_Laptops", "graphql_Houses", "graphql_Rooms", "graphql_Drinks"];
graphqlSchemaTypes.forEach((type) => {
  assertions.push(
    test.assertTrue(createdSchemaString.includes(type), "Implicit schema is not containing desired " + type + " type")
  );
});

let primarySchemaTypes = ["primary_names"];
primarySchemaTypes.forEach((type) => {
  assertions.push(
    test.assertTrue(createdSchemaString.includes(type), "Implicit schema is not containing desired " + type + " type")
  );
});

let secondarySchemaTypes = ["secondary_names"];
secondarySchemaTypes.forEach((type) => {
  assertions.push(
    test.assertTrue(createdSchemaString.includes(type), "Implicit schema is not containing desired " + type + " type")
  );
});

// Given implicit schema generated by the user
// When the user stores it in the database
// Then test is implicit schema can be parsed into AST successfully.
let queryDocumentAst = null;
let errors = [];
try {
  queryDocumentAst = JSON.stringify(parse(createdSchema));
} catch (err) {
  errors.push(err.toString());
}
assertions.push(
  test.assertNotEqual(queryDocumentAst, null, "The GraphQL implicit schema cannot be parsed into AST"),
  test.assertEqual(errors.length, 0, "The GraphQL implicit schema cannot be parsed into AST")
);


// Given implicit schema generated by the user
// When the user stores it in the database
// Then test if schema is saved successfully in Schemas database.
storeImplicitSchema();

const config = admin.getConfiguration();
let schemaDatabaseId = admin.databaseGetSchemaDatabase(config, xdmp.database());

let javascriptString = "fn.document('/graphql/implicitSchema.sdl');";

let documentSaved = xdmp.eval(javascriptString,  null,
  {
    "database": schemaDatabaseId
  });
documentSaved = JSON.stringify(documentSaved);

console.log("Actual Result of documentSaved=>\n" + documentSaved);

assertions.push(
  test.assertEqual(createdSchemaString, documentSaved, "The GraphQL implicit schema saved should match the generated one")
);

testTeardown();

assertions;